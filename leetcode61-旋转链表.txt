给你一个链表的头节点 head ，旋转链表，将链表每个节点向右移动 k 个位置。

示例 1：

输入：head = [1,2,3,4,5], k = 2
输出：[4,5,1,2,3]

示例 2：

输入：head = [0,1,2], k = 4
输出：[2,0,1]
 

提示：

链表中节点的数目在范围 [0, 500] 内
-100 <= Node.val <= 100
0 <= k <= 2 * 109



/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        if(k==0 || head==nullptr || head->next == nullptr)
        return head;
        int n = 1;
        ListNode* cnt = head;
        while(cnt->next)
        {
            cnt = cnt->next;
            n++;
        }
        int add = n - k % n;
        if(add==n)
          return head;
        cnt->next = head;     //将链表环起了
        while(add--)
        {
            cnt = cnt->next;
        }
        ListNode* node = cnt->next;
        cnt->next = nullptr;  //断开链表环
        return node;
    }
};